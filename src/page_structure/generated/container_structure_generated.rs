// automatically generated by the FlatBuffers compiler, do not modify



use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod pager {

  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum ContainerStructureOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ContainerStructure<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ContainerStructure<'a> {
    type Inner = ContainerStructure<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self { _tab: flatbuffers::Table { buf, loc } }
    }
}

impl<'a> ContainerStructure<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        ContainerStructure { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args ContainerStructureArgs) -> flatbuffers::WIPOffset<ContainerStructure<'bldr>> {
      let mut builder = ContainerStructureBuilder::new(_fbb);
      builder.add_unit_from_page(args.unit_from_page);
      builder.add_scheme_from_page(args.scheme_from_page);
      builder.finish()
    }

    pub const VT_SCHEME_FROM_PAGE: flatbuffers::VOffsetT = 4;
    pub const VT_UNIT_FROM_PAGE: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn scheme_from_page(&self) -> u64 {
    self._tab.get::<u64>(ContainerStructure::VT_SCHEME_FROM_PAGE, Some(0)).unwrap()
  }
  #[inline]
  pub fn unit_from_page(&self) -> u64 {
    self._tab.get::<u64>(ContainerStructure::VT_UNIT_FROM_PAGE, Some(0)).unwrap()
  }
}

impl flatbuffers::Verifiable for ContainerStructure<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>(&"scheme_from_page", Self::VT_SCHEME_FROM_PAGE, false)?
     .visit_field::<u64>(&"unit_from_page", Self::VT_UNIT_FROM_PAGE, false)?
     .finish();
    Ok(())
  }
}
pub struct ContainerStructureArgs {
    pub scheme_from_page: u64,
    pub unit_from_page: u64,
}
impl<'a> Default for ContainerStructureArgs {
    #[inline]
    fn default() -> Self {
        ContainerStructureArgs {
            scheme_from_page: 0,
            unit_from_page: 0,
        }
    }
}
pub struct ContainerStructureBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ContainerStructureBuilder<'a, 'b> {
  #[inline]
  pub fn add_scheme_from_page(&mut self, scheme_from_page: u64) {
    self.fbb_.push_slot::<u64>(ContainerStructure::VT_SCHEME_FROM_PAGE, scheme_from_page, 0);
  }
  #[inline]
  pub fn add_unit_from_page(&mut self, unit_from_page: u64) {
    self.fbb_.push_slot::<u64>(ContainerStructure::VT_UNIT_FROM_PAGE, unit_from_page, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ContainerStructureBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ContainerStructureBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ContainerStructure<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for ContainerStructure<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("ContainerStructure");
      ds.field("scheme_from_page", &self.scheme_from_page());
      ds.field("unit_from_page", &self.unit_from_page());
      ds.finish()
  }
}
#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_root_as_container_structure<'a>(buf: &'a [u8]) -> ContainerStructure<'a> {
  unsafe { flatbuffers::root_unchecked::<ContainerStructure<'a>>(buf) }
}

#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_size_prefixed_root_as_container_structure<'a>(buf: &'a [u8]) -> ContainerStructure<'a> {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<ContainerStructure<'a>>(buf) }
}

#[inline]
/// Verifies that a buffer of bytes contains a `ContainerStructure`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_container_structure_unchecked`.
pub fn root_as_container_structure(buf: &[u8]) -> Result<ContainerStructure, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<ContainerStructure>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `ContainerStructure` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_container_structure_unchecked`.
pub fn size_prefixed_root_as_container_structure(buf: &[u8]) -> Result<ContainerStructure, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<ContainerStructure>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `ContainerStructure` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_container_structure_unchecked`.
pub fn root_as_container_structure_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ContainerStructure<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<ContainerStructure<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `ContainerStructure` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_container_structure_unchecked`.
pub fn size_prefixed_root_as_container_structure_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ContainerStructure<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<ContainerStructure<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a ContainerStructure and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `ContainerStructure`.
pub unsafe fn root_as_container_structure_unchecked(buf: &[u8]) -> ContainerStructure {
  flatbuffers::root_unchecked::<ContainerStructure>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed ContainerStructure and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `ContainerStructure`.
pub unsafe fn size_prefixed_root_as_container_structure_unchecked(buf: &[u8]) -> ContainerStructure {
  flatbuffers::size_prefixed_root_unchecked::<ContainerStructure>(buf)
}
#[inline]
pub fn finish_container_structure_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<ContainerStructure<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_container_structure_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<ContainerStructure<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod Pager

